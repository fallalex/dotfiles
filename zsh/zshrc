# Way to profile zsh
# https://htr3n.github.io/2018/07/faster-zsh/
# and use this command /usr/bin/time zsh -i -c exit
# zmodload zsh/zprof

# this has helped me before with stuff like:
# (eval):1: \_mv: function definition file not found
glocate zcompdump | xargs rm -f

sudo launchctl limit maxfiles 50000 200000
ulimit 50000

export PATH="/usr/local/sbin:$PATH"
export PATH="$HOME/scripts/.scripts:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.jenv/bin:$PATH"

eval "$(zoxide init zsh)"

source ~/.zplug/init.zsh
zplug "mafredri/zsh-async", from:github
zplug "sindresorhus/pure", use:pure.zsh, from:github, as:theme
zplug "zsh-users/zsh-history-substring-search"
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-completions"
# zplug load --verbose
zplug load > /dev/null

# test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

if [[ -f ~/.fzf.zsh ]]; then 
    source ~/.fzf.zsh
    export FD_DEFAULT_OPTIONS="-I --hidden --follow --exclude .git"
    export FZF_DEFAULT_COMMAND="fd $FD_DEFAULT_OPTIONS"
    export FZF_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
    _fzf_default() { eval "fd $FD_DEFAULT_OPTIONS -t d ." }

    # https://github.com/junegunn/fzf/wiki/Configuring-fuzzy-completion
    export FZF_COMPLETION_TRIGGER=''
    bindkey '^T' fzf-completion
    bindkey '^I' $fzf_default_completion

    j() {
        # TODO: would like interactive fzf for dirs in pwd
        # this shows resent dirs and rank
        if [ "$#" -eq 0 ]; then
            zi
        else
            z "$@"
        fi
    }

    v() {
        # if no args fzf file
        # if blank close
        true
    }
    
    vr() {
        # fzf from list of files from previous rg command
        true
    }
fi

export TERM=xterm-256color
# git@github.com:mbadolato/iTerm2-Color-Schemes.git
# git clone git@github.com:seebi/dircolors-solarized.git
eval `gdircolors ~/dircolors-solarized/dircolors.ansi-dark`

# Prompt
autoload -Uz promptinit
RPROMPT=
promptinit
prompt pure > /dev/null

function precmd_tasks() {
    RPROMPT=""
    TASKCOUNT=$(task +cap +PENDING count)
    # https://www.reddit.com/r/zsh/comments/cgbm24/multiline_prompt_the_missing_ingredient/
    if [[ ${TASKCOUNT} -ne 0 ]]; then
        RPROMPT='%f%F{red}${TASKCOUNT}%f'
    fi
}
add-zsh-hook precmd precmd_tasks


# https://github.com/sindresorhus/pure/issues/300
# this is to fix weird prompt collisions from completion
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# I ended up not liking this
# Set default vi mode to Normal
#function zle-line-init { zle -K vicmd }
function zle-line-init { }
zle -N zle-line-init
KEYTIMEOUT=1

# # This broke fzf and other completion menus
# # updates the prompt every 15 seconds
# TMOUT=15
# TRAPALRM() { zle reset-prompt }

# Completion Settings
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle ':completion:*' file-sort modification
zstyle ':completion:*' format '--- Completing %d ---'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent pwd ..
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' rehash true
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' squeeze-slashes true
zstyle :compinstall filename '/home/fallalex/.zshrc'

fpath=($HOME/scripts/.scripts $fpath)

setopt COMPLETE_ALIASES MENU_COMPLETE autocd beep extendedglob nomatch
autoload -Uz compinit
compinit

# History Settings
HISTFILE=~/.history
HISTSIZE=5000                           # internal history
SAVEHIST=9223372036854775807            # history file - set to max value possible in zsh
setopt HIST_NO_FUNCTIONS
setopt HIST_FIND_NO_DUPS
setopt NO_SHARE_HISTORY
setopt HIST_LEX_WORDS
setopt HIST_VERIFY
setopt EXTENDED_HISTORY
setopt HIST_FCNTL_LOCK
# https://stackoverflow.com/questions/11670935/comments-in-command-line-zsh
setopt interactivecomments
export HISTORY_IGNORE="( *|ls|ls *|ll|ll *|l.|l. *|pwd|j|j *|z|z *|cd|cd *|..|~|vz|hr|hl|ht|man *|ta|ta *|ss|date|date *|dt|dat|o|reset)"

function precmd() {
    local -i rc=$?
    emulate -L zsh
    setopt extendedglob
    # Only enter command in history with return 0 and not ignored
    if (( $rc == 0 && $+_HISTLINE && $#_HISTLINE )); then
        builtin print -rs -- $_HISTLINE
        unset _HISTLINE
        # incremental append history
        fc -AI
    fi
}

function zshaddhistory() {
    emulate -L zsh
    setopt extendedglob
    # trim trailing whitespace for comparison
    _HISTLINE=$(echo -n - "$1" | perl -pe 's/ +$//')
    if [[ $_HISTLINE = ${~HISTORY_IGNORE} ]]; then
        unset _HISTLINE
        return 1
    # dont add '-' to history could not find another way
    # this does not clear them from the history file
    elif [[ "$_HISTLINE" = "-" ]]; then
        unset _HISTLINE
    fi
    # we never want to succeed here as we manually set
    # history in precmd if this returns double entry occurs
    return 1
}

# actually clear the screen
function clear-scrollback-buffer {
  clear && printf '\e[3J'
  zle && zle .reset-prompt && zle -R
}

# https://github.com/jenv/jenv/issues/148
eval "$(rbenv init --no-rehash -)"
(rbenv rehash &) 2> /dev/null

eval "$(jenv init --no-rehash -)"
(jenv rehash &) 2> /dev/null

# NeoVim & ZSH vi mode
export EDITOR=/usr/local/bin/nvim
#export VISUAL=$EDITOR
export PAGER="$EDITOR -Rc AnsiEsc -c 'set number!' -c 'set relativenumber!'"
export MANPAGER="$EDITOR -u NORC -c 'set ft=man' -"
bindkey -v
bindkey '^[[Z' reverse-menu-complete
bindkey -M vicmd v edit-command-line
autoload edit-command-line; zle -N edit-command-line
bindkey '^L' clear-scrollback-buffer
autoload clear-scrollback-buffer; zle -N clear-scrollback-buffer
MYVIMRC="$HOME/.config/nvim/init.vim"
VIMINIT=$MYVIMRC

function openapp() {
    locate .app | rg -N ".*\.app$" | fzf | gxargs -i open {}
    # open "$(fd -t d ".app" /Applications | rg -Ni "$@")"
}

# TODO: alias p='den'
# brew install findutils
alias gupdatedb='gupdatedb --localpaths=$HOME --output=$HOME/tmp/locatedb --prunepaths=$HOME/Library'
alias glocate='glocate --database=$HOME/tmp/locatedb'
alias ss='exec zsh -l'
alias v="$EDITOR"
alias vz="$EDITOR $HOME/.zshrc"
alias vim="$EDITOR"
alias vimr="$EDITOR --noplugin -R -c 'syn off'"
alias ff='fzf'
alias viles="$PAGER"
alias dt='date "+%F %T"'
alias dat='date "+%Y%m%d"'
alias journal="$EDITOR ~/vimwiki/journal/$(date '+%F').md"
# you can pass -- as an argument, and all subsequent arguments are treated as operands and not options, even if they begin with a dash
alias -- -='cd -'
alias ~='cd ~'
alias ..='cd ../'
alias o='openapp'
alias echopath='echo -e ${PATH//:/\\n}'
alias otpass='pass otp.yaml | otpass.py'
alias otp='otpass'
#alias led='ledger --init-file ~/ledger/ledgerrc -f ~/ledger/ledger'
#alias ecu=' sshpass -p `pass ibm | head -1` ssh ecurep'
#alias ibmproxy='autossh -M 0 -qND localhost:8088 ibmvpn'
alias dnsflush='sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder'
alias ls='gls -h --time-style=long-iso --color=auto'
alias ll='ls -Fl'
alias lg='ll --group-directories-first'
alias lt='ll -tr --time-style=full-iso'
alias l.='ll -d .*'
alias files='fd -t f $(pwd)'
alias g='git'
alias jv='jenv'
alias jvg='jenv shell $(jenv global)'
alias jvl='jenv shell $(jenv local)'
alias jvpaths='ll $HOME/.jenv/versions'
alias jvpath='ll `jenv prefix`'
alias rv='rbenv'
alias rvg='rbenv shell $(rbenv global)'
alias rvl='rbenv shell $(rbenv local)'
alias tw='timew'
alias ta='task'
alias ex='exuno'
alias vr='vrops'
alias labvpn='sshuttle --dns -r relay 10.0.10.0/24'
alias bmftp='ftp ftp.bluemedora.com'
alias pyhist="cat ~/.ptpython/history | sed 's/^\+//' | sed 's/^\#.*//' | tr -s '\n'"
alias wr='curl -s wttr.in | ghead -n -2'
alias rad='curl -s "https://radar.weather.gov/Conus/Loop/NatLoop.gif" > radar.gif; mpv --loop-file=inf --fs radar.gif'
alias deploylogs="log show --info --debug --last 30m --style compact --predicate 'subsystem == \"com.bluemedora.vrops-deploy.daemon\"'"
alias bw='bw --session `den -sn`'
alias ppjson='python -m json.tool'
alias sshp='ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no'
alias ssh-cp-id-p='ssh-copy-id -o PreferredAuthentications=password -o PubkeyAuthentication=no'
alias xargs='gxargs'
alias readlink='greadlink'
alias realpath='grealpath'
alias hr='fc -RI' # read hist from file
alias hl='fc -li -20' # local shell hist
alias ht="tail $HISTFILE"

function spotlight { mdfind "kMDItemDisplayName == '$@'wc"; }

# Find git repos
#glocate -r /.git$ | xargs gdirname

# cd () {
#     if [ `echo $1 | grep -cE "^TS00[0-9]{7}$"` -eq 1 ]
#     then
#         builtin cd "/ecurep/sf/${1:0:5}/${1:5:3}/${1}"
#     else
#         builtin cd "$@"
#     fi
# }
#


