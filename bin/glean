#!/bin/sh

# Cleaning a local clone of a git repository is non-trivial
# The shotgun approach is starting over by removing then cloning again
# This should cover most things including submodules
# It does leave local branches

if [[ ($# -eq 1) && (-d $1) ]]; then
    path=`readlink -f $1`
elif [[ $# -eq 0 ]]; then
    path=`pwd -P`
else
    echo Expects no arguments or a path
    exit 1
fi

git -C $path rev-parse --is-inside-work-tree > /dev/null 2>&1 || { echo "$path is not in a git repo working tree"; exit 1; }

echo Cleaning repo at $(git -C $path rev-parse --show-toplevel)

# Not sure what this will do with multiple remote
remote=$(git -C $path remote show)

# Update origin/HEAD to match remote
git -C $path remote set-head $remote -a
branch=`basename $(git -C $path symbolic-ref refs/remotes/origin/HEAD)`

git -C $path fetch --recurse-submodules -Ppt $remote
git -C $path switch --recurse-submodules -fC $branch --track $remote/$branch
git -C $path reset --recurse-submodules --hard $remote/$branch
git -C $path clean -ffdx

